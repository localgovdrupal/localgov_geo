<?php

/**
 * @file
 * Update hooks to move to geo_entity.
 */

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\geo_entity\Entity\GeoEntity;
use Drupal\geo_entity\Entity\GeoEntityType;
use Drupal\localgov_geo_update\MigrateDisplayModes;
use Drupal\views\Entity\View;

/**
 * Ensure geo_entity modules enabled.
 */
function localgov_geo_update_update_8001() {
  $enabled = [];
  $module_handler = \Drupal::service('module_handler');
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['geo_entity']);
  $enabled[] = \t('Geo entity');
  if ($module_handler->moduleExists('localgov_geo_address')) {
    $module_installer->install(['geo_entity_address']);
    $enabled[] = \t('Geo entity: address');
  }
  if ($module_handler->moduleExists('localgov_geo_area')) {
    $module_installer->install(['geo_entity_area']);
    $enabled[] = \t('Geo entity: area');
  }

  return t("Enabled @modules.", ['@modules' => implode(', ', $enabled)]);
}

/**
 * Ensure equivalent geo_entity bundles to localgov_geo.
 */
function localgov_geo_update_update_8002() {
  $localgov_storage = \Drupal::entityTypeManager()->getStorage('localgov_geo_type');
  $geo_storage = \Drupal::entityTypeManager()->getStorage('geo_entity_type');
  foreach ($localgov_storage->loadMultiple() as $localgov_type) {
    // Ensure properties on geo_entity type are the same.
    $geo_type = $geo_storage->load($localgov_type->id());
    $geo_type_values = $localgov_type->toArray();
    if (!empty($geo_type_values['label_token'])) {
      // Updated token.
      $geo_type_values['label_token'] = str_replace('localgov_geo', 'geo_entity', $geo_type_values['label_token']);
    }
    if (empty($geo_type)) {
      $geo_type = GeoEntityType::create($geo_type_values);
    }
    else {
      foreach ($geo_type_values as $property => $value) {
        if (!in_array($property, ['uuid', '_core'])) {
          $geo_type->set($property, $value);
        }
      }
    }
    $geo_type->save();
  }
}

/**
 * Ensure geo_entity bundles have fields of localgov_geo.
 */
function localgov_geo_update_update_8003() {
  $field_storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_storage->loadByProperties(['entity_type' => 'localgov_geo']) as $lgd_field) {
    $geo_field = $field_storage->loadByProperties([
      'field_name' => $lgd_field->getName(),
      'entity_type' => 'geo_entity',
    ]);
    $field_array = $lgd_field->toArray();
    unset($field_array['uuid'], $field_array['id'], $field_array['_core'], $field_array['dependencies']);
    $field_array['entity_type'] = 'geo_entity';
    if (empty($geo_field)) {
      $geo_field = $field_storage->create($field_array);
    }
    else {
      $geo_field = reset($geo_field);
      foreach ($field_array as $property => $value) {
        $geo_field->set($property, $value);
      }
    }
    $geo_field->save();
    foreach ($field_config->loadByProperties([
      'field_name' => $lgd_field->getName(),
      'entity_type' => 'localgov_geo',
    ]) as $lgd_instance) {
      $geo_instance = $field_config->loadByProperties([
        'field_name' => $lgd_instance->getName(),
        'entity_type' => 'geo_entity',
        'bundle' => $lgd_instance->getTargetBundle(),
      ]);
      $instance_array = $lgd_instance->toArray();
      unset($instance_array['uuid'], $instance_array['id'], $instance_array['_core'], $instance_array['dependencies']);
      $instance_array['entity_type'] = 'geo_entity';
      if (empty($geo_instance)) {
        $geo_instance = $field_config->create($instance_array);
      }
      else {
        $geo_instance = reset($geo_instance);
        foreach ($instance_array as $property => $value) {
          $geo_instance->set($property, $value);
        }
      }
      $geo_instance->save();
    }
  }
}

/**
 * Recreate localgov_geo as geo entities.
 */
function localgov_geo_update_update_8004(&$sandbox) {
  // Set up the batch by retrieving all of the IDs.
  $storage = \Drupal::entityTypeManager()->getStorage('localgov_geo');
  if (!isset($sandbox['progress'])) {
    $sandbox['ids'] = $storage->getQuery()->accessCheck(FALSE)->execute();
    $sandbox['max'] = count($sandbox['ids']);
    $sandbox['progress'] = 0;
  }

  // Try to update 25 entities at a time.
  $ids = array_slice($sandbox['ids'], $sandbox['progress'], 25);

  foreach ($storage->loadMultiple($ids) as $entity) {
    $geo = GeoEntity::create($entity->toArray());
    $geo->save();
    $entity->delete();
    $sandbox['progress']++;
  }

  // Try to update the percentage but avoid division by zero.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // Show a status update for the current progress.
  return t("Updated the label for @progress out of @max geo entities.", [
    '@progress' => $sandbox['progress'],
    '@max' => $sandbox['max'],
  ]);
}

/**
 * Update reference fields to use geo_entity and its library browser.
 */
function localgov_geo_update_update_8005() {
  $fields = [];
  $storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($storage->loadMultiple() as $field) {
    assert($field instanceof FieldStorageConfigInterface);
    if ($field->getType() == 'entity_reference' && $field->getSetting('target_type') == 'localgov_geo') {
      $field_handler_settings = [];
      $field->setSetting('target_type', 'geo_entity');
      // Find all form modes and update the browser.
      $bundle_storage = \Drupal::entityTypeManager()->getStorage('field_config');
      foreach ($bundle_storage->loadByProperties([
        'entity_type' => $field->getTargetEntityTypeId(),
        'field_name' => $field->getName(),
      ]) as $field_config) {
        assert($field_config instanceof FieldConfigInterface);
        $field_handler_settings[$field_config->id()] = $field_config->getSetting('handler_settings');
        // Field config itself does not need updating. But the form and display.
        $display_storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
        foreach ($display_storage->loadByProperties([
          'targetEntityType' => $field_config->getTargetEntityTypeId(),
          'bundle' => $field_config->getTargetBundle(),
        ]) as $display) {
          assert($display instanceof EntityFormDisplayInterface);
          $component = $display->getComponent($field->getName());
          $component['settings']['entity_browser'] = 'geo_entity_library';
          $display->setComponent($field->getName(), $component);
          $display->save();
        }
      }
      $field->save();
      foreach ($field_handler_settings as $field_config_id => $setting) {
        $field_config = $bundle_storage->load($field_config_id);
        assert($field_config instanceof FieldConfigInterface);
        $field_config->setSetting('handler_settings', $setting);
        $field_config->save();
      }
      $fields[] = $field->getLabel() . ' (' . $field->id() . ')';
    }
  }

  return t("Updated fields @fields.", ['@fields' => implode(', ', $fields)]);
}

/**
 * Update the entity browser library.
 */
function localgov_geo_update_update_8806() {
  $view = View::load('localgov_geo_library');
  $view->delete();
}

/**
 * Update views fields.
 */
function localgov_geo_update_update_8807() {
  $views = View::loadMultiple();
  foreach ($views as $view) {
    $altered = FALSE;
    $displays = $view->get('display');
    foreach ($displays as $display_id => $display) {
      if (isset($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as $field_name => $field) {
          if (isset($field['entity_type']) && $field['entity_type'] == 'localgov_geo') {
            $displays[$display_id]['display_options']['fields'][$field_name]['entity_type'] = 'geo_entity';
            $altered = TRUE;
          }
          if (isset($field['table']) && $field['table'] == 'search_api_entity_localgov_geo') {
            $displays[$display_id]['display_options']['fields'][$field_name]['table'] = 'search_api_entity_geo_entity';
            $altered = TRUE;
          }
        }
      }
    }
    if ($altered) {
      $view->set('display', $displays);
      $view->save();
    }
  }
}

/**
 * Migrate view and form display modes from localgov_geo to geo_entites.
 */
function localgov_geo_update_update_8809() {
  $view_mode_ids = \Drupal::entityTypeManager()->getStorage('entity_view_display')
    ->getQuery()
    ->condition('targetEntityType', 'localgov_geo')
    ->execute();
  foreach ($view_mode_ids as $view_mode_id) {
    [$bundle, $name] = array_slice(explode('.', $view_mode_id, 3), 1, 2);
    MigrateDisplayModes::migrate($bundle, 'view', $name);
  }
  $form_mode_ids = \Drupal::entityTypeManager()->getStorage('entity_form_display')
    ->getQuery()
    ->condition('targetEntityType', 'localgov_geo')
    ->execute();
  foreach ($form_mode_ids as $form_mode_id) {
    [$bundle, $name] = array_slice(explode('.', $form_mode_id, 3), 1, 2);
    MigrateDisplayModes::migrate($bundle, 'form', $name);
  }
}
